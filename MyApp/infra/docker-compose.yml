volumes:
    pg_volume:                                
        name: pg_volume
    rabbitmq_volume:
        name: rabbitmq_volume

services: 
    postgres:
        image: postgres
        container_name: postgres
        ports:
            - ${PG_PORT}:${PG_PORT}
        volumes:
            - pg_volume:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: ${PG_NAME}
            POSTGRES_USER: ${PG_USERNAME}
            POSTGRES_PASSWORD: ${PG_PASSWORD}

    base:
        image: ${DOCKER_REGISTRY-}base
        container_name: base
        build:
            context: ../
            dockerfile: ./infra/Dockerfile.base

    testsintegration:
        image: ${DOCKER_REGISTRY-}testsintegration
        container_name: testsintegration
        depends_on:
            base:
                condition: service_completed_successfully
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        build:
            context: ../
            dockerfile: ./infra/Dockerfile.testsintegration
        environment:
            TESTCONTAINERS_HOST_OVERRIDE: host.docker.internal

    dbdeploy:
        image: ${DOCKER_REGISTRY-}dbdeploy
        container_name: dbdeploy
        restart: on-failure
        depends_on:
            base:
                condition: service_completed_successfully
        build:
            context: ../
            dockerfile: ./infra/Dockerfile.dbdeploy
        environment:
            ConnectionStrings__Default: Server=${PG_INTERNAL_HOST};Port=${PG_PORT};Database=${PG_NAME};User Id=${PG_USERNAME};Password=${PG_PASSWORD};

    server:
        image: ${DOCKER_REGISTRY-}server
        container_name: server
        depends_on:
            dbdeploy:
                condition: service_completed_successfully
        build:
            context: ../
            dockerfile: ./infra/Dockerfile.server
        ports:
            - ${SERVER_PORT}:${SERVER_PORT}
        environment:
            Server__UrlsJoined: http://+:${SERVER_PORT}
            ConnectionStrings__Database: Server=${PG_INTERNAL_HOST};Port=${PG_PORT};Database=${PG_NAME};User Id=${PG_USERNAME};Password=${PG_PASSWORD};
            Email__SMTPHost: ${MAILHOG_INTERNAL_HOST}
            Email__SMTPPort: ${MAILHOG_PORT}
            Messaging__Host: ${RABBITMQ_INTERNAL_HOST}
            Messaging__Port: ${RABBITMQ_PORT}
            Messaging__ManagementPort: ${RABBITMQ_PORT_MANAGEMENT}
            Messaging__User: ${RABBITMQ_USERNAME}
            Messaging__Pass: ${RABBITMQ_PASSWORD}
            Auth__AdminUser__Username: ${SERVER_ADMIN_USERNAME}
            Auth__AdminUser__Password: ${SERVER_ADMIN_PASSWORD}
            Auth__AdminUser__Email: ${SERVER_ADMIN_EMAIL}

    testssystem:
        image: ${DOCKER_REGISTRY-}testssystem
        container_name: testssystem
        depends_on:
            server:
                condition: service_started
        build:
            context: ../
            dockerfile: ./infra/Dockerfile.testssystem
        environment:
            Server__BaseUrl: http://server:${SERVER_PORT}
            Auth__Username: ${SERVER_ADMIN_USERNAME}
            Auth__Password: ${SERVER_ADMIN_PASSWORD}
            Auth__Email: ${SERVER_ADMIN_EMAIL}

    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin
        restart: always
        ports:
            - ${PGADMIN_PORT}:80
        environment:
            PGADMIN_DEFAULT_EMAIL: postgres@example.com
            PGADMIN_DEFAULT_PASSWORD: postgres
            PGADMIN_CONFIG_SERVER_MODE: 'False'
            PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
        configs:
            - source: servers.json
              target: /pgadmin4/servers.json

    mailhog:
        image: mailhog/mailhog
        container_name: mailhog
        ports:
            - ${MAILHOG_PORT}:${MAILHOG_PORT}
            - 8025:8025
    
    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        ports:
            - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
            - ${RABBITMQ_PORT_MANAGEMENT}:${RABBITMQ_PORT_MANAGEMENT}
        volumes:
            - rabbitmq_volume:/var/lib/rabbitmq/data
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}


configs:
    servers.json:
        content: |
            {
                "Servers": {
                    "1": {
                        "Group": "Servers",
                        "Name": "docker",
                        "Host": "postgres",
                        "Port": 5432,
                        "MaintenanceDB": "postgres",
                        "Username": "${PG_USERNAME}",
                        "SSLMode": "prefer"
                    }
                }
            }