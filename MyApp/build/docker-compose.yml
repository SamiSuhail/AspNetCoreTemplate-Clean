volumes:
    db_volume:                                
        name: db_volume
    rabbitmq_volume:
        name: rabbitmq_volume

services: 
    db:
        image: postgres
        container_name: db
        hostname: ${DB_INTERNAL_HOST}
        ports:
            - ${DB_PORT}:${DB_PORT}
        volumes:
            - db_volume:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: ${DB_NAME}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}

    base:
        image: ${DOCKER_REGISTRY-}base
        container_name: base
        build:
            context: ../
            dockerfile: ./build/Dockerfile.base

    testsintegration:
        image: ${DOCKER_REGISTRY-}testsintegration
        container_name: testsintegration
        depends_on:
            base:
                condition: service_completed_successfully
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        build:
            context: ../
            dockerfile: ./build/Dockerfile.testsintegration
        environment:
            TESTCONTAINERS_HOST_OVERRIDE: host.docker.internal

    dbdeploy:
        image: ${DOCKER_REGISTRY-}dbdeploy
        container_name: dbdeploy
        restart: on-failure
        depends_on:
            base:
                condition: service_completed_successfully
            db:
                condition: service_started
        build:
            context: ../
            dockerfile: ./build/Dockerfile.dbdeploy
        environment:
            ConnectionStrings__Default: Server=${DB_INTERNAL_HOST};Port=${DB_PORT};Database=${DB_NAME};User Id=${DB_USERNAME};Password=${DB_PASSWORD};

    server:
        image: ${DOCKER_REGISTRY-}server
        container_name: server
        hostname: ${SERVER_INTERNAL_HOST}
        depends_on:
            dbdeploy:
                condition: service_completed_successfully
            queue:
                condition: service_started
            email:
                condition: service_started
        build:
            context: ../
            dockerfile: ./build/Dockerfile.server
        ports:
            - ${SERVER_PORT}:${SERVER_PORT}
        environment:
            Server__UrlsJoined: http://+:${SERVER_PORT}
            ConnectionStrings__Database: Server=${DB_INTERNAL_HOST};Port=${DB_PORT};Database=${DB_NAME};User Id=${DB_USERNAME};Password=${DB_PASSWORD};
            Email__SMTPHost: ${EMAIL_INTERNAL_HOST}
            Email__SMTPPort: ${EMAIL_SMTP_PORT}
            Messaging__Host: ${QUEUE_INTERNAL_HOST}
            Messaging__Port: ${QUEUE_PORT}
            Messaging__ManagementPort: ${QUEUE_WEBUI_PORT}
            Messaging__User: ${QUEUE_USERNAME}
            Messaging__Pass: ${QUEUE_PASSWORD}
            Auth__AdminUser__Username: ${SERVER_ADMIN_USERNAME}
            Auth__AdminUser__Password: ${SERVER_ADMIN_PASSWORD}
            Auth__AdminUser__Email: ${SERVER_ADMIN_EMAIL}

    testssystem:
        image: ${DOCKER_REGISTRY-}testssystem
        container_name: testssystem
        restart: on-failure
        depends_on:
            server: 
                condition: service_started
        build:
            context: ../
            dockerfile: ./build/Dockerfile.testssystem
        environment:
            Server__BaseUrl: http://${SERVER_INTERNAL_HOST}:${SERVER_PORT}
            Server__AdminAuth__Username: ${SERVER_ADMIN_USERNAME}
            Server__AdminAuth__Password: ${SERVER_ADMIN_PASSWORD}
            Server__AdminAuth__Email: ${SERVER_ADMIN_EMAIL}
            Email__Host: ${EMAIL_INTERNAL_HOST}
            Email__Port: ${EMAIL_IMAP_PORT}

    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin
        restart: always
        ports:
            - ${DB_WEBUI_PORT}:80
        environment:
            PGADMIN_DEFAULT_EMAIL: postgres@example.com
            PGADMIN_DEFAULT_PASSWORD: postgres
            PGADMIN_CONFIG_SERVER_MODE: 'False'
            PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
        configs:
            - source: servers.json
              target: /pgadmin4/servers.json

    email:
        image: jijiechen/papercut:latest
        container_name: email
        hostname: ${EMAIL_INTERNAL_HOST}
        ports:
            - ${EMAIL_WEBUI_PORT}:${EMAIL_WEBUI_PORT}
            - ${EMAIL_SMTP_PORT}:${EMAIL_SMTP_PORT}
            - ${EMAIL_POP3_PORT}:${EMAIL_POP3_PORT}
            - ${EMAIL_IMAP_PORT}:${EMAIL_IMAP_PORT}
        environment:
            PAPERCUT_USE_SSL: "false"
    
    queue:
        image: rabbitmq:3-management
        container_name: queue
        hostname: ${QUEUE_INTERNAL_HOST}
        ports:
            - ${QUEUE_PORT}:${QUEUE_PORT}
            - ${QUEUE_WEBUI_PORT}:${QUEUE_WEBUI_PORT}
        volumes:
            - rabbitmq_volume:/var/lib/rabbitmq/data
        environment:
            RABBITMQ_DEFAULT_USER: ${QUEUE_USERNAME}
            RABBITMQ_DEFAULT_PASS: ${QUEUE_PASSWORD}


configs:
    servers.json:
        content: |
            {
                "Servers": {
                    "1": {
                        "Group": "Servers",
                        "Name": "docker",
                        "Host": "${DB_INTERNAL_HOST}",
                        "Port": 5432,
                        "MaintenanceDB": "postgres",
                        "Username": "${DB_USERNAME}",
                        "SSLMode": "prefer"
                    }
                }
            }